package com.nt.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import com.nt.entity.FoodItem;
import com.nt.io.FoodRequest;
import com.nt.io.FoodResponse;
import com.nt.repository.FoodItemsRepository;

import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class FoodItemServiceImp implements IFoodItemService
{
    @Autowired
    private FoodItemsRepository foodRepo;

    @Autowired
    private Cloudinary cloudinary;

    @Override
    public String uploadFile(MultipartFile file) throws Exception 
    {
        // Generate a unique public ID for the image (optional)
        String publicId = "food/" + UUID.randomUUID();

        Map uploadResult = cloudinary.uploader().uploadLarge(file.getBytes(), 
            ObjectUtils.asMap(
                "public_id", publicId,
                "resource_type", "auto" // auto-detects the file type
            ));

        // The uploaded file URL
        return (String) uploadResult.get("secure_url");
    }
    
    
	@Override
	public FoodResponse addFoodItem(FoodRequest req,MultipartFile file) throws Exception
	{
		FoodItem item=convertToFoodItem(req);
		String imageUrl=uploadFile(file);
		item.setImageUrl(imageUrl);
		
		item=foodRepo.save(item);
		return convertToFoodResponse(item);
	}
	
	public FoodItem convertToFoodItem(FoodRequest req)
	{
		return FoodItem.builder()
		.name(req.getName())
		.description(req.getDescription())
		.price(req.getPrice())
		.category(req.getCategory()).build();
	}
	
	public FoodResponse convertToFoodResponse(FoodItem item)
	{
		return FoodResponse.builder()
		.id(item.getId())
		.name(item.getName())
		.description(item.getDescription())
		.price(item.getPrice())
		.category(item.getCategory())
		.imageUrl(item.getImageUrl()).build();
	}


	@Override
	public List<FoodResponse> readAllFoodItems() 
	{
		List<FoodItem> items=foodRepo.findAll();
		return items.stream().map(obj->convertToFoodResponse(obj)).collect(Collectors.toList());
	}


	@Override
	public FoodResponse readFoodItemById(String id) 
	{
		foodRepo.
		return null;
	}

}
























